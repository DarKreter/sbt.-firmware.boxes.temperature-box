#include "Sender.hpp"
#include "CanParser_autogenerated.hpp"
#include "CommCAN.hpp"

using namespace SBT::System::Comm;

// Initialize array with zeros and set task periodicity to 5s
Sender::Sender() : PeriodicTask("Sender", 2, 5000, 128), data{}, i{0} {}

void Sender::initialize() {}

void Sender::run() {
  // Sending 4 CAN messages alternately
  switch (i) {
  case 0:
    // Creating structure connected with ParamID.
    // Names of structures are always {ParamUD}_t
    LIFEPO4_GENERAL_t foo;
    // Fill it with sample data
    foo.percentage = 90;
    foo.voltage = 320;
    foo.dischargingCurrent = 12;
    foo.chargeCurrent = 1023;
    foo.state = 1;

    // Pack structure into 8 bytes long array
    // All packing functions have names Pack_{ParamID}.
    // They take pointer to structure to pack and pointer to array to fill
    Pack_LIFEPO4_GENERAL(&foo, data);

    // To send, you need to setup Source and Param ID and pass payload array.
    CAN::Send(CAN_ID::Source::LIFEPO4_1, CAN_ID::Message::LIFEPO4_GENERAL,
              data);
    i++;
    break;
  case 1:
    LIFEPO4_CELLS_1_t poo;
    poo.cellVoltage1 = 3021;
    poo.cellVoltage2 = 2036;
    poo.cellVoltage3 = 1075;
    poo.cellVoltage4 = 12;
    poo.cellVoltage5 = 582;

    Pack_LIFEPO4_CELLS_1(&poo, data);

    // Sending with same SourceID as above, but with different ParamID
    CAN::Send(CAN_ID::Source::LIFEPO4_1, CAN_ID::Message::LIFEPO4_CELLS_1,
              data);

    i++;
    break;
  case 2:
    LIFEPO4_CELLS_1_t boo;
    boo.cellVoltage1 = 645;
    boo.cellVoltage2 = 1234;
    boo.cellVoltage3 = 3125;
    boo.cellVoltage4 = 0;
    boo.cellVoltage5 = 898;

    Pack_LIFEPO4_CELLS_1(&boo, data);

    // Same ParamID as above, but different SourceID
    CAN::Send(CAN_ID::Source::LIFEPO4_2, CAN_ID::Message::LIFEPO4_CELLS_1,
              data);

    i++;
    break;
  default:
    PV_DATA_t hoo;
    hoo.panelCurrent = 123;
    hoo.panelPower = 323;
    hoo.panelVoltage = 23;

    Pack_PV_DATA(&hoo, data);

    // Different SourceID and ParamID
    CAN::Send(CAN_ID::Source::MPPT_1, CAN_ID::Message::PV_DATA, data);

    i = 0;
    break;
  }
}
