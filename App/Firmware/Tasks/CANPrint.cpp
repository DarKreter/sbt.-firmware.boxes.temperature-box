//
// Created by hubert25632 on 13.05.22.
//

#include "CANPrint.hpp"
#include "CanParser_autogenerated.hpp"

using namespace SBT::System::Comm;

CANPrint::CANPrint()
    : SBT::System::Task("CANPrint", 1, 192),
      messageQueue(xQueueCreate(4, sizeof(CAN::RxMessage)))
{
}

void CANPrint::initialize()
{
    uart->ChangeModeToBlocking();
    uart->Initialize();

    // Receive everything
    CAN::AddFilter(CAN::Filter(0, 0, CAN::Filter::FilterType::MASK_FILTER),
                   this, &CANPrint::canCallback);
}

void CANPrint::run()
{
    CAN::RxMessage rxmsg{};
    xQueueReceive(messageQueue, &rxmsg, portMAX_DELAY);

    switch(rxmsg.GetMessageID().paramID) {
    case CAN_ID::Param::TEMPERATURE_POWERBOX: {
        TEMPERATURE_POWERBOX_t temperaturePowerbox =
            Unpack_TEMPERATURE_POWERBOX(rxmsg.GetPayload());
        uart->printf(
            "# Temperature in PowerBox:\r\n"
            "Temperature 1 [deg C]: %d.%04d\r\n"
            "Temperature 2 [deg C]: %d.%04d\r\n\n",
            temperaturePowerbox.temperature1 / 16,
            (std::abs(temperaturePowerbox.temperature1) * 625) % (int)1e4,
            temperaturePowerbox.temperature2 / 16,
            (std::abs(temperaturePowerbox.temperature2) * 625) % (int)1e4);
        break;
    }
    case CAN_ID::Param::HEARTBEAT: {
        HEARTBEAT_t heartbeat = Unpack_HEARTBEAT(rxmsg.GetPayload());
        uart->printf("# Heartbeat:\r\n"
                     "Uptime [s]: %d.%03d\r\n"
                     "CAN TX message fail count: %d\r\n"
                     "CAN RX message fail count: %d\r\n\n",
                     heartbeat.upTime / (int)1e3, heartbeat.upTime % (int)1e3,
                     heartbeat.canTxMessFailCount,
                     heartbeat.canRxMessFailCount);
        break;
    }
    default:
        uart->printf("# Unknown message:\r\n"
                     "ParamID: %d\r\n\n",
                     rxmsg.GetMessageID().paramID);
        break;
    }
}

void CANPrint::canCallback(CAN::RxMessage rxMessage)
{
    xQueueSend(messageQueue, &rxMessage, 0);
}
